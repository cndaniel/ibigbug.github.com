<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>8D is Here</title>
    <link href="http://blog.xiaoba.me" />
    <updated>2013-04-25T08:30:12Z</updated>
    <id>http://blog.xiaoba.me</id>
    
    
    <entry>
        <title type="html"><![CDATA[Ath9k驱动在Arch中无法连接无线网的问题]]></title>
        <author><name>xiaoba</name><uri>http://blog.xiaoba.me</uri></author>
        <link href="http://blog.xiaoba.me/ath9k-under-archlinux.html"/>
        <published>2013-04-11T08:30:12Z</published>
        <id>http://blog.xiaoba.me/ath9k-under-archlinux.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>自从弄好了校园网无线共享之后发现Arch的无线网络有问题，莫名其妙各种连不上，各种iw的命令放上去都是<code>Invalid argument</code>，真是郁闷= =</p>
<p>为什么这么确定是Arch问题呢，因为手机和Windows都没问题= =。</p>
<p>折腾了两天，算是把问题解决了。</p>
<p>最开始以为是更新内核之后驱动有问题，于是自己编译了Arch Wiki里面提到的<code>compat-wireless</code>。果不其然，现在可以操作无线网卡了！但是还是连不上网。</p>
<p>继续翻手册，上面提到wicd可能造成无线不稳定，卸载之，不成。</p>
<p>手册又提到了把无线网卡的电源管理关掉，也没有解决。</p>
<p>不过此时虽然无线不能用，有线依然可以用得好好的啊。凑合着用了一下午的有线，但心里还是不爽。</p>
<p>直到刚刚才想起可以用<code>dmesg</code>的，里面的相关记录的是<code>ctrl-event-disconnected reason=0</code>，放进去Google，好像好多人有这个问题。这下放心了肯定可以解决了。</p>
<p>最终参考<a href="https://bbs.archlinux.org/viewtopic.php?id=137643">这个帖子</a>中一位老兄的办法：</p>
<blockquote>
<p># sudo modprobe -rf ath9k<br />
# sudo modprobe -v ath9k nohwcrypt=1<br />
# sudo service network-manager restart # or wicd or whatever  </p>
<h4>If it works, make it permanent:</h4>
<p># echo "options ath9k nohwcrypt=1" | sudo tee /etc/modprobe.d/ath9k.conf  </p>
</blockquote>
<p>至此，Ath9k驱动在Arch中无法连接无线网的问题已经解决了。</p>
<p>好了，终于可以连上路由器了！激动！</p>
<p>但是更令人激动的是虽然连上路由了但是竟然他妈的不能浏览网页！！更有甚者！！连路由都Ping不通！好吧我承认高兴太早了、、</p>
<p>再dmesg，发现是一个跟IPv6有关的错误，猜想是openwrt的IPv6没有配置好的问题吧，于是先<a href="https://wiki.archlinux.org/index.php/IPv6#Disable_IPv6">把无线网卡的IPv6干掉</a>，现在已经可以正常使用无线网了。</p>
<p>不过话说今天打球的时候崴脚了好他妈疼啊啊啊啊！高中毕业之后就没有崴脚过的印象了，没想到时隔多年竟然又遇到了好不爽啊、、疼的连路都不想走啊、、不过晚饭的时候部长帮我带了吃的，好幸福、</p> ]]>
        </content>
    </entry>
    
    
    
    <entry>
        <title type="html"><![CDATA[用Python生成特定频率的波形文件]]></title>
        <author><name>xiaoba</name><uri>http://blog.xiaoba.me</uri></author>
        <link href="http://blog.xiaoba.me/generate-simple-wave.html"/>
        <published>2013-03-23T08:30:12Z</published>
        <id>http://blog.xiaoba.me/generate-simple-wave.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>好久不写流水帐了，这一次的流水帐还是代码笔记。</p>
<p>最近买了个耳机，不算太好，不过算是比那种10块钱的好用些吧。网上相关文章看了一些，无意间看到一个小工具，可以发出特定频率的声音来测试耳机和人耳对频率的反应。不过遗憾的是没有for Linux版本的。干脆自己学写一个好了。</p>
<p>起初打算是把某个wav里面特定的频率过滤出来，好歹还学过一点傅里叶变换没有全忘记。要是用一个带通滤波器应该可以撸出来吧。没动手之前以为滤波器会很难写，然而不得不感叹Scipy的强大，什么FIR，IIR都只要直接设定参数便可以直接使用了！这个让我激动了一把，因为当时没有学原理，现在有了<code>scipy.signal</code>就不怕了！可是故事并没有因此而向好的方向发展，wav文件读进来的数据，不知道该怎么把设计好的滤波器应用上去，无论是python内置的wave还是scipy封装的<code>scipy.io.wavefile</code>都没法得到想要的结果，于是这个仅持续了两天的工程还是流产了。唉学艺不精啊！希望有相关经验的朋友能不吝指点一下。</p>
<p>退而求其次，就有了本文。</p>
<p>因为有了前面两天的基础，对wave文件有了一定了解，想实现题目讲的就不难了。加上搜资料一共用了10min就做好了。代码放在了<a href="https://gist.github.com/ibigbug/5227390">gist</a>。不过还有个问题就是产生的波形频率不是特别纯，在基波附近又很多的谐波，由于数学学得不好，也暂时不去考虑了，说不定哪一天可以忽然想清楚了呢。</p>
<p><em>哦对了，测试的时候不要把频率撸的太低或者太高！！！第一是会很难受！！！第二会不会很危险（<a href="http://chinese.engadget.com/2008/12/09/Sonic-Nausea/">看这里不知真假！！！！</a>）！！！</em></p>
<p>顺便记录一点最近的烦心事吧。感冒！！！！！！每天咳的要死，躺在床上就咳，怕影响室友睡觉，就去外面抽烟，外面又好冷啊，回到床上接着咳，这样折腾一两次就2，3点多了，早晨根本没精力起床TT。。。更别说去图书馆吵其他人了。。。</p>
<p>看到知乎招聘，想试一试，随便写了50字简历过去没想到不到2个小时就有了回复，又激动了一把。是两道代码题目，一道是应该考状态机，一直没怎么了解过所以难度有点大;另一道是考web开发的，这一个还稍微了解一点。虽然不是专业班子，好赖不及两道题都写出了，还比deadline提前了3天发了回去。结果石沉大海去了。。。再TT。。。</p>
<p>考研应该考不上吧。。。实习又撸不到。。。第三次TT。。。</p> ]]>
        </content>
    </entry>
    
    
    
    <entry>
        <title type="html"><![CDATA[Node.js 和 express.js初体验]]></title>
        <author><name>xiaoba</name><uri>http://blog.xiaoba.me</uri></author>
        <link href="http://blog.xiaoba.me/node-and-express.html"/>
        <published>2013-01-25T08:30:12Z</published>
        <id>http://blog.xiaoba.me/node-and-express.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>因为前几天有位朋友分手了,要删掉人人网的所有状态.看他在那一条一条点来点去挺麻烦的,何不写个脚本来自动删呢.于是便有了本文.</p>
<p>其实脚本不难写,因为3g.renren.com的登录验证是不麻烦的.返回的html结构也不复杂,请求过程也都很直白,用python的话应该不是什么难题.可是既然node最近这么火,就正好借机会试一下吧.嘿嘿^^.</p>
<p>跟复习专业课一样,学一种新的工具流程也都差不多.无非是:</p>
<ol>
<li>
<p>简单google一下,了解个大概(如果要是专业课复习,就是看一遍目录);</p>
</li>
<li>
<p>如果手册有Overview之类的什么东西抄一份(看一遍例题);</p>
</li>
<li>
<p>开始写,过程中多翻手册,如果不赶时间,最后把手册粗略的过一遍,做到对工具支持的特性心中有数(做题,看书,记公式);</p>
</li>
<li>
<p>重复3.</p>
</li>
</ol>
<p>唉写到这里又不免感叹我这个学渣的悲哀TT,可是无论如何,既然生命要继续,我还是要把东西写完.</p>
<p>Node是什么我就不抄百科了.Express就是Node平台下面的一个web框架.对应起来就像Tornado是Python的一个web框架一样.但又不完全等价:因为Python是一门语言,而Node是一个平台,跑的是喜闻乐见的JavaScript语言,用的Google的V8引擎.</p>
<p>因为Node是以异步出名的,所以刚开始上手的时候真是有点不习惯.比如从数据库读一个User,然后渲染到前台.如果是在python里面,只要依次执行两个函数就好了.可是到这里,我前台页面都渲染完了,控制台显示User还没读出来(当然是夸张了,不过应该是这个道理).没错,要用回调的方式来解决了.至于具体的解决方案和手册教程,网上的前辈们早已总结好了.随便一搜就搜得到.</p>
<p>对Node大概有个了解之后,就开始之前提到的那个脚本.这里采用了Express.js+jsdom+request三个库来处理,除了jsdom这个库有memory leak的bug之外,这个bug我要mark一下,因为当时是部署到heroku的,采集状态不一会程序就crash了- =.log里面显示的是定位到jsdom那一行内存不足了(开始完全想不到会是这个库的问题,以为Node的性能好差啊,随便写个类爬虫应用就内存不足),后来网上搜了搜,好多人有同样的问题,就是要在jsdom的任务执行完毕之后用<code>window.close()</code>来关掉对应的env(其实看起来也不算是bug了,使用不得当而已),其他过程都问题不大,按照手册按部就班把这个小应用写了出来.放到了鄙人的<a href="https://github.com/ibigbug/nodetest">github</a>上面了.</p>
<p>不过还是遗留了一个问题就是:目前的状态采集和处理操作是顺序执行的(这个专业词叫什么来着我给搞忘记了),也就是说目前,在采集的时候,程序是阻塞掉的,不能同时删除.也是网上简单搜了一下,因为node的是异步执行的所以不用多线程的概念还是怎么回事.反正要把采集和处理能够并行执行才好,不知道node在这个问题上一般是怎么处理.改天再研究一下好了.记得好像是可以用setTimeout来避免主线程被阻塞掉的,但是setTimeout的原理看过又给搞忘记了,改天再翻下书好了.</p>
<p>嗯嗯就这样了要睡觉去了好困啊...</p> ]]>
        </content>
    </entry>
    
    
    
    <entry>
        <title type="html"><![CDATA[ansys解决平行传输线周围静电场分布]]></title>
        <author><name>xiaoba</name><uri>http://blog.xiaoba.me</uri></author>
        <link href="http://blog.xiaoba.me/ansys.html"/>
        <published>2012-12-13T08:30:12Z</published>
        <id>http://blog.xiaoba.me/ansys.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>最近有一门电磁场的实验课要交一份实验报告内容如题.</p>
<p>由于没有去上课结果不会写.网上搜了几下,发现相关资料挺少的,更别提实例了.于是赶紧从图书馆借了一本ansys的书翻了整整一夜算是应付过去了.</p>
<p>ansys是一个很强大的工程软件, 具体可以去看百科.这里只记录一些关于用有限元方法来处理电磁场的基本步骤,至于有限元算法本身,我不懂,此文也不涉及.</p>
<p>大概分为以下几步:</p>
<ul>
<li>
<p>建立有限元模型</p>
<ol>
<li>
<p>建模其实就是应用Point,Line,Area来画出实际模型.这一步不多说.提一点就是ansys的大部分操作都提供两种实现方式:GUI操作或者命令行操作.由于GUI操作需要不停的点来点去,所以我个人比较倾向于直接打命令来操作.</p>
</li>
<li>
<p>之后定义单元类型,材料属性.这一步是告诉ansys你创建的是什么模型.</p>
</li>
<li>
<p>之后剖分模型:就是把模型分成若干个小格子(也就是有限元算法的实质).</p>
</li>
</ol>
</li>
<li>
<p>加载(载荷)和求解</p>
<p>载荷不多说,就是加上相应参数.这个例子里面就是告诉ansys每根导线电势多少,边界电势多少,等等.</p>
</li>
<li>
<p>后处理</p>
<p>当ansys按照上面的模型,载荷,计算出结果之后.提供了很多后处理方法,这个例子就用到了绘制电场云图,电位云图等功能.</p>
</li>
</ul>
<p>以上是我对Ansys处理电磁学问题的关键步骤的入门级理解,记录下来希望与大家一起交流.有错误的地方希望各位及时指点,也希望能给像我一样刚入门ansys的新手提供一点思路,至于具体的实现可以参考相关书目或者查看ansys手册.</p>
<p>PS:如果<code>/filname, filename, key</code>的最后一个参数是1的话,ansys是会用一个log的文本文件记录下每一步操作的,本来想把我的log贴出来不过发现不小心给搞丢了就算了吧.</p> ]]>
        </content>
    </entry>
    
    
    
    <entry>
        <title type="html"><![CDATA[A Byte of WSGI]]></title>
        <author><name>xiaoba</name><uri>http://blog.xiaoba.me</uri></author>
        <link href="http://blog.xiaoba.me/wsgi.html"/>
        <published>2012-12-07T08:30:12Z</published>
        <id>http://blog.xiaoba.me/wsgi.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>If you have ever used some python frameworks like <em>tornado</em>, <em>flask</em>, you may hear about WSGI. But what's this?</p>
<p>WSGI means Web Server Gateway Interface. What it is <strong>NOT</strong>:a server, a python module, a framework, an API or any kind of software. What it is: What it is: an interface specification by which server and application communicate. WSGI is just a kind of protocol who makes web app and web server communicate friendly.</p>
<p>A simple WSGI application(meaning WSGI compliant) may look like this:</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">application</span><span class="p">(</span><span class="n">environ</span><span class="p">,</span> <span class="n">start_respone</span><span class="p">):</span>
    <span class="n">start_respone</span><span class="p">(</span><span class="s">&#39;200 OK&#39;</span><span class="p">,</span> <span class="p">[(</span><span class="s">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s">&#39;text/plain&#39;</span><span class="p">)])</span>
    <span class="k">yield</span> <span class="s">&#39;Hello World</span><span class="se">\n</span><span class="s">&#39;</span>
</pre></div>

<p>It's a callable and takes two parameters environ and start_respone. environ is a dictionary containing <a href="http://en.wikipedia.org/wiki/Common_Gateway_Interface#Environment_variables">environment variables in CGI</a>. start_respone is a callable taking two required parameters status(200 OK) and response_headers(['Content-Type', 'text/plain']).</p>
<p>And a simple WSGI server may look like this:</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">call_application</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">environ</span><span class="p">):</span>
    <span class="n">body</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">status_headers</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">]</span>
    <span class="k">def</span> <span class="nf">start_response</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">):</span>
        <span class="n">status_headers</span><span class="p">[:]</span> <span class="o">=</span> <span class="p">[</span><span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">body</span><span class="o">.</span><span class="n">append</span>
    <span class="n">app_iter</span> <span class="o">=</span> <span class="n">app</span><span class="p">(</span><span class="n">environ</span><span class="p">,</span> <span class="n">start_response</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">app_iter</span><span class="p">:</span>
            <span class="n">body</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">app_iter</span><span class="p">,</span> <span class="s">&#39;close&#39;</span><span class="p">):</span>
            <span class="n">app_iter</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">status_headers</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">status_headers</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>

<span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="n">call_application</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="p">{</span><span class="o">...</span><span class="n">environ</span><span class="o">...</span><span class="p">})</span>
</pre></div>

<p>Both app and server above are WSGI compliant and the two function just explain how the python frameworks work.</p>
<p>If you want to dive into WSGI, go to <a href="http://www.python.org/dev/peps/pep-3333/#the-start-response-callable">PEP3333</a> :).</p> ]]>
        </content>
    </entry>
    
    
    
    
    
    <entry>
        <title type="html"><![CDATA[Run Custom Scripts on boot under Systemd]]></title>
        <author><name>xiaoba</name><uri>http://blog.xiaoba.me</uri></author>
        <link href="http://blog.xiaoba.me/run_script_on_boot_under_systemd.html"/>
        <published>2012-11-09T08:30:12Z</published>
        <id>http://blog.xiaoba.me/run_script_on_boot_under_systemd.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>As archlinux has replaced <em>initscripts</em> with <em>systemd</em> as default init system and <a href="https://www.archlinux.org/news/end-of-initscripts-support/">will start removing initscripts suppport</a>, I use systemd now.</p>
<p>To be different from <em>initscripts</em>, <em>rc scripts</em> are no longer available. However it's complicated to write a very  <em>.service</em> boot script for each program. So solusion like this may be useful:</p>
<ol>
<li>
<p>Create a systemd-service-script which start a normal script and run it on boot.</p>
</li>
<li>
<p>You can execute any command via the script mentioned in step 1.</p>
</li>
</ol>
<p>In fact we are emulating the <em>rc.local</em> script which only works under <em>initscripts</em>.</p>
<p>The demo may look like this:</p>
<h4>custom.service:</h4>
<div class="highlight"><pre>[Unit]
Description=Custom startup-scripts

[Service]
ExecStart=/usr/bin/systemd_scripts_on_boot

[Install]
WantedBy=multi-user.target
</pre></div>

<h4>systemd_scripts_on_boot:</h4>
<div class="highlight"><pre>#!/bin/bash

EXECUTE YOUR CUSTOM SCRIPT YOU WANT TO RUN ON STARTUP
</pre></div>

<p>I'm a newbie on linux, systemd and English. Please let me know if any bugs ^^</p> ]]>
        </content>
    </entry>
    
    
    
    <entry>
        <title type="html"><![CDATA[arch试用手记]]></title>
        <author><name>xiaoba</name><uri>http://blog.xiaoba.me</uri></author>
        <link href="http://blog.xiaoba.me/first-byte-of-arch.html"/>
        <published>2012-10-21T08:30:12Z</published>
        <id>http://blog.xiaoba.me/first-byte-of-arch.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>前段时间装了Arch，用了大概一周多了吧。</p>
<p>从接触linux到现在大概也算是有几年时间了，之前一直在用ubuntu，其间也尝试过cent啊，arch啊，gentoo啊，但都没有持久。因为受到了windows的影响吧。是从ubuntu里面慢慢熟悉了linux，才逐渐拜托了对windows的依赖（话说ubuntu可真是windows用户通向linux的一根非常平滑的管道）。</p>
<p>记得第一次装arch的时候内心是有一种恐惧感的，虽然当时还有安装脚本。现在的安装步骤看起来变得繁琐了，不过我更喜欢现在的安装过程，因为既不像gentoo那样费时费力，又不像windows或者ubuntu那样简单无脑。其实在安装之前就就对arch有一份好感，正式见面之后便深深的喜欢上了它。还是简单记录一下安装步骤吧。</p>
<p>我选择的是光盘安装：</p>
<ol>
<li>
<h6>备份</h6>
<p>这个不用多说吧</p>
</li>
<li>
<h6>制作启动盘</h6>
<p>下载那个几百兆的iso，刻到光盘就好了。如果没有光驱，也可以写进U盘。顺便抱怨一下我的人品：在windows里面用了N种XXX写入工具做的引导盘都有各种问题不能启动，最后还是被迫装了cgywin用dd写进去的。</p>
</li>
<li>
<h6>安装</h6>
<p>#vi install.txt即可。</p>
<p>如果你不知道之后做什么，那么建议你暂时先不要用arch。</p>
<p>当你执行arch-chroot的时候，那么恭喜你已经完成了arch的安装。紧接着你可以修改pacman的mirrorlist，选择你网络环境下速度最快的源。</p>
<p>接下来还有一些收尾工作。</p>
</li>
<li>
<h6>收尾</h6>
<ul>
<li>
<p>安装引导</p>
<p>我选的是grub2，因为毕竟熟悉一些。不过有一点，装好了grub之后默认是只能识别arch操作系统的。如果你的硬盘上有windows 7等其他系   统，那么推荐你安装一个叫做os-prober的东西，可以节省手动写配置文件的时间。</p>
</li>
<li>
<p>其他</p>
<p>安装完引导之后，你就可以不用引导盘直接启动硬盘上的arch了。至于其他的一些本地化啊、图形啊、声音之类的配置就自由选择了。这里顺便强力推荐一个叫做“下拉式终端”的东西。</p>
</li>
</ul>
</li>
</ol>
<p>下面谈一谈接触arch不长时间的感受吧。</p>
<p>arch是一个容易让人一下子就喜欢上的系统，就像会对某个女孩子一见钟情一样。相比ubuntu，arch显得更清秀朴实，甚至连一个图形界面都没有——不像ubuntu那样集成了许多你需要或者不需要以及连名字都没听过甚至都不知道其存在的一些软件包。就像刚干燥好的的瓷器胚胎一样，可以认你雕刻喜欢的花纹图上你喜欢的颜色。不过这一点对于我这个丝毫没有艺术天分的人来说并不是特别诱人，而arch给我的一种一切从简的理念正好符合我这种有系统洁癖的人的口味。所以点进arch官网最先出现的一句话是</p>
<blockquote>
<p>A simple, lightweight distribution</p>
</blockquote>
<p>正如我一直想追求的：keep is simple，stupid。</p> ]]>
        </content>
    </entry>
    
    
    
    <entry>
        <title type="html"><![CDATA[大二下]]></title>
        <author><name>xiaoba</name><uri>http://blog.xiaoba.me</uri></author>
        <link href="http://blog.xiaoba.me/grade2-2nd-term.html"/>
        <published>2012-06-22T08:30:12Z</published>
        <id>http://blog.xiaoba.me/grade2-2nd-term.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>考完了大二下的最后一门，真是虚成狗了。昨晚看了一晚，趴了1个小时直接去考场——已经不知道第几次通宵复习了。</p>
<p>交完卷出来，不知道是累还是困还是饿，反正就不是舒服的感觉。估计考研的感觉也就这B样吧，提前适应下子也好。</p>
<p>绩点持续走低，现在真是只求过不求高分了。只求顺利毕业，爬爬电线杆搬搬变压器，是在不行就回家种韭菜放羊去。</p>
<p>这学期课不多，但是据说都比较难。不过其实也没那么难。看了一两天几本都能过。当然还要感谢基友们考前给提供的情报，打击的时候精确了一些。就算不用作弊也凑合着能低分飘，知足。</p>
<p>眼瞅着就大三了，大学就快过完了。学霸是做不成了。高分也基本渐行渐远遥不可及了。多写点代码，多读点书，开开心心跟基友们一起过完大学，顺利毕业。祝保研的被保研，粗国的顺利还不被爆菊，考研的一举成功，其他的都能找到自己喜欢的工作。</p>
<p>废话一大把，只想记录一下。</p> ]]>
        </content>
    </entry>
    
    
    
    <entry>
        <title type="html"><![CDATA[轉眼已過好多年]]></title>
        <author><name>xiaoba</name><uri>http://blog.xiaoba.me</uri></author>
        <link href="http://blog.xiaoba.me/memory.html"/>
        <published>2012-01-24T08:30:12Z</published>
        <id>http://blog.xiaoba.me/memory.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>這一次高中班聚人數明顯少了許多，不知道下一次，下下次如何。</p>
<p>畢業了之後，即便是當初最親近的人如軟哥，小黑，還有所有的室友也只能一年見一兩次也就知足了。</p>
<p>見到了老周，與我腦海中的印象是一樣的，沒有顯得蒼老，依然堆著滿臉笑容。</p>
<p>只是如今不會再像從前那樣笑裏藏刀──突然間笑容不見接踵而至的是一陣狂風暴雨一般的說教。</p>
<p>不過他說的很讓人信服，也確實很受用。</p>
<p>那時候他喜歡說的一些話，依然印象深刻，也被多數高三十五班的同胞們奉為經典語錄吧。</p>
<blockquote>
<p>“輕易別惹事，熱了事也不要怕事”</p>
<p>“ 我的老師是最好的老師”</p>
<p>“無為便無位”</p>
<p>“活著最重要”（當然這一句要放在具體語境使用了）</p>
<p>“本人高三十五班”（同上）</p>
</blockquote>
<p>竟然多數已經記不起來了，唉。</p>
<p>只記得當時不論是課間還是在睡覺前，誰都有可能模仿老周的樣子，冒出幾句老周語錄來娛樂一下。</p>
<p>而他的專業課知識儲備自不必說了，絕對一流響當當。</p>
<p>作為教師，他以豐富的知識讓人敬佩。</p>
<p>作為長者，他以過人的智慧讓人更加敬重。</p>
<p>語文老師一直沒見，對她的記憶也停留在那一張被稱為“鹹豬手”畢業照上了。</p>
<p>總覺得該找個時間去探望她一下，但是一直沒有機會。</p>
<p>從小就不喜歡學語文這一科，直到高中。</p>
<p>那時候語文考的成績很爛，經常不能及格。</p>
<p>作為她的首席科代表，自然要受到一點“特殊待遇”了。</p>
<p>于是記得每天有空都會鑽到她的辦公室，去所謂的“額外輔導”。</p>
<p>其實每次也基本上是做做樣子，實際上就是像與我媽媽聊天那樣，與她聊聊天而已。</p>
<p>不過不論是平時上課也好，還是小屋子單獨聊天也好，從語文老師那裡也學到了許多比字音字形更有用的東西。</p>
<p>當時剛好是夏天，還能有額外的“福利”，記得有一次還被她用筆敲過一次我的頭。</p>
<p>現在想來那時候還真的是比較幼稚啊。</p>
<p>不過後來學習語文有了興趣而且更加認真倒是真的。</p>
<p>高考拿了個110幾分，不知道算不算是語文老師的功勞。</p>
<p>同桌沒見到，是意料之內的。</p>
<p>但還是在那一天早晨確認了一下她不會去，一陣莫名的小失落啊。</p>
<p>不過剛剛與同桌聊了很多。</p>
<p>與那時候一樣，還是囑咐我要少說臟話，少抽煙。</p>
<p>她問我過得如何，我回答除了學術，其他都好。</p>
<p>問我要不要考研，我說太累不考，她說我還是這個風格。</p>
<p>問她畢業如何打算，她答計劃是要考研的，只是考哪一家大學還待定。</p>
<p>高中時候她就比我有鬥志，現在依然如此。</p>
<p>哪像我，中學時候就不想著好好讀書，有一點時間就去打球，泡網吧。（由于讀書的城市比較小，好像還不是蠻流行泡酒吧）</p>
<p>大學了還是一樣，不讀書不看報，經常折騰一些不知道有沒有意義的事情。</p>
<p>籃球也很少打，因為身體虛的很，技術又很菜，如此循環，已經沒辦法在與別人激烈的身體對抗了。</p>
<p>大部分時間碼幾段代碼，算是讓時間不至于完全虛度。</p>
<p>隨心情，去上上課，學一點不知道以後還用不用的上的知識，稍帶把考試給應付過去，通不過考試就比較難看了。</p>
<p>到了大二稍稍好了一點，開始幹了一點正事。</p>
<p>書讀了一兩本，不是很會讀，畢竟之前算是沒讀過什麽書，所以做起來還是有一點難度。</p>
<p>不過凡事都有開始嘛，而且即使書籍沒有改變我的思想，至少可以豐富我的見識。</p>
<p>不求什麽別的，只求做當下最好的自己。</p>
<p>話又講多了。。。</p>
<p>她現在的男友對她很好，而且不講臟話，也不抽煙，只是偶爾會因為打Dota而冷落她。</p>
<p>見她為此發發小脾氣，抱怨男人不理她也稍稍夾帶這幾分秀恩愛的意思，也挺幸福的。</p>
<p>少不了跟她講了幾句關于YT，問我為何分開了。</p>
<p>我覺得分開了就是暫時不能繼續在一起了，一定要問個理由的話，那就是不合適。</p>
<p>講了幾句沒有講清楚，她也不再追問。</p>
<p>最後她塞給我這樣一句話：</p>
<blockquote>
<p>時間長了，必然沒有太多新鮮感，但平平淡淡才是真，以後有合適的，好好珍惜。</p>
</blockquote>
<p>雖然她說的挺對，但是我倒不覺得這樣非常好。</p>
<p>趁大家還年輕還有機會有資本就多折騰幾下，等到折騰不動了，也就容不得再折騰了。</p>
<p>如果以後到了該婚嫁的年紀，倒是希望可以與同桌一樣的女子一起。</p>
<p>少算那也是要幾年之後的事情。</p>
<p>歌詞裏面說，“六十年之後，但願能認得出你的子女。”</p>
<p>盡管時間會改變我們，若未面目全非，一起找尋昨天的記憶應該也會很美好吧。</p>
<p>還叫我遇到什麽事，網以後想想。她總是比我想的遠。</p>
<p>看樣子她是做好與現在的男朋友打持久戰的准備了，我也看好你們。</p>
<p>還有一點就是她依舊不肯承認對我很好，或者她也就跟本沒有對我很好，又或者是她對誰都那麽好。</p>
<p>然而，這個已經不重要了。</p>
<p>不是後記：</p>
<p>由于最近情緒比較低落（一年前的我一定會用蛋疼來形容的），就寫了這一段既不普通，又不文藝的文字。用來記錄下那一些怕被忘掉的故事。我一直覺得平時我是一個比較二逼的人，沒輕沒重沒心沒肺的。但是改不了的就是這個喜歡蛋疼的習慣。不是放不下，而是不舍得放下。</p> ]]>
        </content>
    </entry>
    
    
    
    <entry>
        <title type="html"><![CDATA[疯子哥再见]]></title>
        <author><name>xiaoba</name><uri>http://blog.xiaoba.me</uri></author>
        <link href="http://blog.xiaoba.me/andy-say-byebye.html"/>
        <published>2012-01-06T08:30:12Z</published>
        <id>http://blog.xiaoba.me/andy-say-byebye.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>疯子哥今天出发了，离开了他热爱的城市，留恋的亲人朋友，乘坐搭载着充满期待和未知的航班，开始一段新的旅程。</p>
<blockquote>
<p>“年轻在于折腾”。</p>
</blockquote>
<p>一切顺利。</p>
<p>算起来来武大有一年半了，不过与疯子哥一起玩的时间不多，毕竟大我两届，但是可以说他是对我大学生活帮助和影响最大的人之一。</p>
<p>要是没有认识疯子哥，就没有bayuwei2010–8GE_EB–fkbyw–lovebyw-ibigbug。</p>
<p>要是没有认识疯子哥，转院到电气的决定说不定还要犹豫一下。</p>
<p>要是没有认识疯子哥，即使加入了网络部也一定会跟现在有很大的不同。</p>
<p>疯子哥是我来学校之后认识的第一位学长，第一次在阿里巴见面的时候好紧张好不安啊，以至于都没记住他长什么样，就记住他那看起来蛮Geek的发型，于是理发一直短平快的也想留跟他一样的发型。记得那天刚刚听完校会宣讲就急忙跑去阿里巴，目测还是让一哥跟疯子哥等了好久。当时说的什么也记不大清了，只记得后来加了自强技术中心还是疯子哥给的建议。至于自强对我的意义，那就是另外的故事了。</p>
<p>大一下学期辗转反侧机缘巧合我来到了电气院，成了疯子哥的直系学弟。虽然心里非常舍不得在物院的兄弟朋友们，但是想到在电气我还认识疯子哥，也就不至于感到那么孤独和无助了。记得当时想急需一位老师的号码，于是想起了疯子哥，果然不一会就拿到了。后来一遇到什么解决不了的麻烦就习惯性的想起了疯子哥，什么电脑坏了啊，实验报告啊，包括后来生活感情问题。都给你添了许多麻烦呢。</p>
<p>转眼来到电气也有一年时间了。虽然我来网络部时候你已经退休了，但是有困难的时候你依然会毫不保留的伸出援助之手。</p>
<p>可以说没有crazyandytk，就没有现在的ibigbug。</p>
<p>不过你走之前没请客= =！等明年毕业典礼时候你回来再见吧。</p>
<p>再过一年，Daniel也要走了，然后是Sigma，都是一走之后就不知几年还能再见或者再也不见，但是这些记忆我会一生都记住，感谢你们陪我一起走过。夜蚊子应该不会走吧？要是搞网站的话别忘了叫我帮你测试安全漏洞哦。</p>
<p>看Latitude疯子哥已经不在中国大陆境内了吧，一路保重。</p>
<p>好好学习~</p>
<p>天天开心~</p>
<p>嘻嘻！</p> ]]>
        </content>
    </entry>
    
    
    
    <entry>
        <title type="html"><![CDATA[梦蝶]]></title>
        <author><name>xiaoba</name><uri>http://blog.xiaoba.me</uri></author>
        <link href="http://blog.xiaoba.me/mengdie-say-byebye.html"/>
        <published>2011-12-04T08:30:12Z</published>
        <id>http://blog.xiaoba.me/mengdie-say-byebye.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>在新图自习完毕,听说今晚两个中心总监换届,比平时早一个小时去办公室开部长会,半路一碗炒粉是晚餐.</p>
<p>来到网站,二会竟然因为拿不到钥匙没开门,于是十几位部长总监挤在小小的办公室里,见证两位总监的离去,当然,还有两位新生代的出现为两大中心注入新鲜的活力.</p>
<p>第一次听说苏姐姐,还是因为梦蝶.programmers are shy又或者’希捷硬盘’那不堪回首的二三往事啊.那时贺欣怪阿姨还在,我还在物院,一起在物院的仓库里找展架,送她回去的樱花路上她教我’会做事,会装逼,会做PPT’.后来什么都没学会.那时候我只听浣熊的,一心一意在前端写着不能算作页面的页面.</p>
<p>第一次见认识梦蝶,是属于"我有他人人"那种,头像粉嫩无比啊.后来知道原来周梦蝶–周迪那个带着棒球帽一脸正太相的就是我们的技术总监.</p>
<p>梦蝶如今轻轻的走了,真的可以说是轻轻的走,在的时候,没听他说过做过什么轰轰烈烈的事情,但是机房刷夜维护服务器的事情他做的绝对不少.虽然不经常写代码,但是毕业墙的首页还是出自你手.临走了,你留下最后一句话:’每个部门自由自己的运行规律,不要给技术太大压力’.不过貌似一直没蹭过你请客吃饭.以后还有机会?</p>
<p>走了个你,来了BD.</p>
<p>跟BD渐渐熟悉起来,是去年一起做十大.现在回过头看那时候做的东西是有点好笑啊~没有git,没有需求文档.确硬是把十大做了下来.很怀念那段写自己想写的代码的日子.</p>
<p>跟BD算是好基友,为什么说’算’呢?因为我们都不搅基.不多说,好基友是啥?就是有事了能在第一时间出现.</p>
<p>其实跟BD的交情比跟梦蝶更深一点,今天虽然两个中心换届,但是最后只在人人上看到了大家对新闻总监的不舍.让本来就低调的梦蝶的离开显得更加冷清.技术中心的文艺青年门,你们又不出来写点什么,我就抛块砖头,也不指望能激起多少水花.至少梦蝶在技术中心这么久,就这么走了,我是舍不得的.虽然我们的工资你推迟发,虽然我们的经费你报销不及时.但是,我还是尊敬的叫一声梦蝶学长,一个技术青年.再见,走好.</p> ]]>
        </content>
    </entry>
    
    
</feed>